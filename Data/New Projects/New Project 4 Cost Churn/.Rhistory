# try(print(my.p + geom_line() + theme(axis.text.x=element_text(angle=90))))
# dev.off()
if("Date" %in% colnames(my.data)) {
# print(my.data[,"Date"])
my.data[,"Date"] <- as.Date(my.data[,"Date"])
my.ddata <- my.data
my.ddata[, "Date"] <- format(as.Date(my.ddata[,"Date"]), "%Y-%m")
my.dt <- as.data.frame(my.ddata[,c("Date","ModulePath","AlternativeCost")])
my.dtframe <- aggregate(AlternativeCost ~ Date+ModulePath, my.dt, sum)
# my.dt = my.data[["ModulePath",["AlternativeCost"]];
write.csv2(file=paste("Project",pid,"ModuleAChurnLevel",my.data.lvl,"History.csv", sep=""),my.dtframe)
png(paste("Project", pid, "ModuleAChurnLevel", my.data.lvl, "History.png", sep=""), unit=imgunit, width=300, height=200, res=imgres)
my.p <- ggplot(my.data, aes(x=Date, colour=ModulePath, y=AlternativeCost)) + theme_bw() + theme(title=element_text(size=9), text=element_text(size=8))
try(print(my.p + geom_step() + theme(axis.text.x=element_text(angle=90))))
dev.off()
}
}
}
write.csv2(file=paste("SignificantAC.csv", sep=""),sign.alt.cost)
library(RMySQL)
install.packages("RMySQL")
library(RMySQL)
mydb = dbConnect(MySQL(), user='root', password='Sch..l1234', dbname='issuesminer', host='host')
mydb = dbConnect(MySQL('localhost'), user='root', password='Sch..l1234', dbname='issuesminer', host='host')
mydb = dbConnect(MySQL(), user='root', password='Sch..l1234', dbname='issues_miner', host='host')
mydb = dbConnect(MySQL(), user='root', password='Sch..l1234', dbname='issuesminer', host='localhost')
dbListTables(mydb)
rs = dbSendQuery(mydb, "select * from projectcostdifference where ProjectId = 1 and ModuleLevel = 2")
ata = fetch(rs, n=-1)
head(ata)
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, costDifference from projectcostdifference where ProjectId = 1 and ModuleLevel = 2")
ata = fetch(rs, n=-1)
head(ata)
plot(ata$costDifference)
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, costDifference from projectcostdifference where ProjectId = 1 and ModuleLevel = 2")
ata = fetch(rs, n=-1)
plot(ata$costDifference, ata$ModulePath);
plot(ata$ModulePath, ata$costDifference);
head(ata)
plot(ata$ModulePath);
plot(ata$costDifference);
quantile(ata$costDifference, c(.95))
quantile(ata$costDifference, c(86, .95))
quantile(ata$costDifference, c(.86, .95))
quantile(ata$costDifference, c(.05))
quantile(ata$costDifference, c(.10))
quantile(ata$costDifference, c(.25))
ata = fetch(rs, n=-1)
quantile(ata$costDifference, c(.25))
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, costDifference from projectcostdifference where ProjectId = 1 and ModuleLevel = 2")
ata = fetch(rs, n=-1)
quantile(ata$costDifference, c(.05))
quantile(ata$costDifference, c(.10))
quantile(ata$costDifference, c(.55))
quantile(ata$costDifference, c(.15))
quantile(ata$costDifference, c(.20))
quantile(ata$costDifference, c(.30))
quantile(ata$costDifference, c(.21))
quantile(ata$costDifference, c(.22))
quantile(ata$costDifference, c(.23))
quantile(ata$costDifference, c(.24))
quantile(ata$costDifference, c(.25))
quantile(ata$costDifference, c(.26))
quantile(ata$costDifference, c(.25))
quantile(ata$costDifference, c(.26))
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, costDifference from projectcostdifference where ProjectId = 1 and ModuleLevel = 2 and costDifference > 1155")
ata = fetch(rs, n=-1)
plot(ata$costDifference);
plot(ata$costDifference);
head(ata)
quantile(ata$costDifference, c(.40))
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, costDifference from projectcostdifference where ProjectId = 1 and ModuleLevel = 2 and costDifference > 8086")
ata = fetch(rs, n=-1)
plot(ata$costDifference);
plot(ata$costDifference);
quantile(ata$costDifference, c(.95))
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, costDifference from projectcostdifference where ProjectId = 1 and ModuleLevel = 2 and costDifference > 219520")
ata = fetch(rs, n=-1)
quantile(ata$costDifference, c(.99))
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, costDifference from projectcostdifference where ProjectId = 1 and ModuleLevel = 2 and costDifference > 987839")
ata = fetch(rs, n=-1)
quantile(ata$costDifference, c(.999))
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, costDifference from projectcostdifference where ProjectId = 1 and ModuleLevel = 2 and costDifference > 1097597")
ata = fetch(rs, n=-1)
library('dplyr')
library('ggplot2')
library(RMySQL)
library('dplyr')
mydb = dbConnect(MySQL(), user='root', password='Sch..l1234', dbname='issuesminer', host='localhost')
dbListTables(mydb)
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, fixesDifference from projectcostdifference where fixesDifference > 0 order by fixesDifference")
ata = fetch(rs, n=-1)
head(ata)
summary(ata$fixesDifference)
curve(qt(.975,x), from = 2 , to = 100, ylab = "Quantile 0.975 ", xlab = "Degrees of freedom", main = "Student t distribution")
abline(h=qnorm(.975), col = 2)
density(ata$fixesDifference)
summary(density(ata$fixesDifference))
ata = fetch(rs, n=-1)
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, fixesDifference from projectcostdifference where fixesDifference > 0 order by fixesDifference")
ata = fetch(rs, n=-1)
summary(ata$fixesDifference)
plot(quantile(ata$fixesDifference, c(.95)))
aov(quantile(ata$fixesDifference, c(.95)))
TukeyHSD(quantile(ata$fixesDifference, c(.95)))
curve(ata$fixesDifference)
curve(ata$fixesDifference, from = 2 , to = 100)
curve(qt(ata$fixesDifference), from = 2 , to = 100)
plot(density(ata$fixesDifference))
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, fixesDifference from projectcostdifference where fixesDifference > 0")
ata = fetch(rs, n=-1)
plot(density(ata$fixesDifference))
curve(density(ata$fixesDifference))
curve((density(ata$fixesDifference), x)))
curve(qt(ata$fixesDifference), x))
curve(qt(ata$fixesDifference), x)))
curve(qt(ata$fixesDifference), x)
curve(qt(ata$fixesDifference, x))
curve(qt(quantile(ata$fixesDifference, c(.95)), x))
curve(quantile(ata$fixesDifference, c(.95)), x)
plot(density(ata$fixesDifference))
plot.default(density(ata$fixesDifference))
plot.design(density(ata$fixesDifference))
plot.function(density(ata$fixesDifference))
plot.xy(density(ata$fixesDifference))
plot(density(ata$fixesDifference))
boxplot(density(ata$fixesDifference))
head(ata)
quantile(ata$fixesDifference)
quantile(ata$fixesDifference, 7.4)
quantile(ata$fixesDifference, 0.4)
quantile(ata$fixesDifference, 0.95)
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, fixesDifference from projectcostdifference where fixesDifference > 30")
ata = fetch(rs, n=-1)
head(ata)
plot(ata$fixesDifference);
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, fixesDifference from projectcostdifference where fixesDifference")
ata = fetch(rs, n=-1)
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, fixesDifference from projectcostdifference")
ata = fetch(rs, n=-1)
quantile(ata$fixesDifference, 0.95)
ata = fetch(rs, n=-1)
quantile(ata$fixesDifference, 0.95)
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, fixesDifference from projectcostdifference")
ata = fetch(rs, n=-1)
quantile(ata$fixesDifference, 0.95)
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, fixesDifference from projectcostdifference where ProjectId = 1 and ModuleLevel = 2")
ata = fetch(rs, n=-1)
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, fixesCompare, costCompare from projectcostdifference where ProjectId = 1 and ModuleLevel = 2")
ata = fetch(rs, n=-1)
head(ata)
ata.cor.test <- cor.test(
x=ata$costCompare,
y=ata$fixesCompare,
method = "kendall",
exact = FALSE
)
mydb = dbConnect(MySQL(), user='root', password='Sch..l1234', dbname='issuesminer', host='localhost')
dbListTables(mydb)
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, fixesCompare, costCompare from projectcostdifference where ProjectId = 1 and ModuleLevel = 2")
ata = fetch(rs, n=-1)
head(ata)
ata.cor.test <- cor.test(
x=head(ata)$costCompare,
y=head(ata)$fixesCompare,
method = "kendall",
exact = FALSE
)
head(ata)
ata.cor.test <- cor.test(
x=head(ata)$costCompare,
y=head(ata)$fixesCompare,
method = "kendall",
exact = FALSE
)
ata.cor.test <- cor.test(
x=head(ata),
y=head(ata),
method = "kendall",
exact = FALSE
)
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, fixesCompare, costCompare from projectcostdifference where ProjectId = 1 and ModuleLevel = 2 limit 10")
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, fixesCompare, costCompare from projectcostdifference where ProjectId = 1 and ModuleLevel = 2 limit 100")
mydb = dbConnect(MySQL(), user='root', password='Sch..l1234', dbname='issuesminer', host='localhost')
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, fixesCompare, costCompare from projectcostdifference where ProjectId = 1 and ModuleLevel = 2 limit 100")
ata = fetch(rs, n=-1)
head(ata)
ata.cor.test <- cor.test(
x=head(ata)$costCompare,
y=head(ata)$fixesCompare,
method = "kendall",
exact = FALSE
)
ata.cor.test <- cor.test(
x=ata$costCompare,
y=ata$fixesCompare,
method = "kendall",
exact = FALSE
)
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, fixesCompare, costCompare from projectcostdifference where ProjectId = 1 and ModuleLevel = 2 limit 10000")
ata = fetch(rs, n=-1)
head(ata)
ata.cor.test <- cor.test(
x=ata$costCompare,
y=ata$fixesCompare,
method = "kendall",
exact = FALSE
)
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, fixesCompare, costCompare from projectcostdifference where ProjectId = 1 and ModuleLevel = 2 and costCompare != 0 and fixesCompare != 0 and limit 10000")
ata = fetch(rs, n=-1)
mydb = dbConnect(MySQL(), user='root', password='Sch..l1234', dbname='issuesminer', host='localhost')
dbListTables(mydb)
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, fixesCompare, costCompare from projectcostdifference where ProjectId = 1 and ModuleLevel = 2 and costCompare != 0 and fixesCompare != 0 and limit 10000")
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, fixesCompare, costCompare from projectcostdifference where ProjectId = 1 and ModuleLevel = 2 and costCompare != 0 and fixesCompare != 0 limit 10000")
ata = fetch(rs, n=-1)
head(ata)
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, fixesCompare, costCompare from projectcostdifference where ProjectId = 1 and ModuleLevel = 2 and costCompare <> 0 and fixesCompare <> 0 limit 10000")
ata = fetch(rs, n=-1)
head(ata)
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, fixesCompare, costCompare from projectcostdifference where ProjectId = 1 and ModuleLevel = 2 and costCompare <> 0 limit 10000")
ata = fetch(rs, n=-1)
head(ata)
ata.cor.test <- cor.test(
x=ata$costCompare,
y=ata$fixesCompare,
method = "kendall",
exact = FALSE
)
ata.cor.test <- cor.test(
x=ata$fixesCompare,
y=ata$costCompare,
method = "kendall",
exact = FALSE
)
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, fixesCompare, costCompare from projectcostdifference where ProjectId = 1 and ModuleLevel = 2 and costCompare <> 0 limit 100000")
ata = fetch(rs, n=-1)
head(ata)
ata.cor.test <- cor.test(
x=ata$fixesCompare,
y=ata$costCompare,
method = "kendall",
exact = FALSE
)
ata.cor.test
ata.cor.test <- cor.test(
x=ata$fixesCompare,
y=ata$costCompare,
method = "kendall",
exact = FALSE
)
ata.cor.test
head(ata)
ata.cor.test <- cor.test(
x=ata$fixesCompare,
y=ata$costCompare,
method = "pearson",
exact = FALSE
)
plot(sd(ata$fixesCompare))
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, costDifference, fixesCompare, costCompare from projectcostdifference where ProjectId = 1 and ModuleLevel = 2 and costCompare <> 0 limit 100000")
ata = fetch(rs, n=-1)
mydb = dbConnect(MySQL(), user='root', password='Sch..l1234', dbname='issuesminer', host='localhost')
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, costDifference, fixesDifference, fixesCompare, costCompare from projectcostdifference where ProjectId = 1 and ModuleLevel = 2 and costCompare <> 0 limit 100000")
ata = fetch(rs, n=-1)
plot(sd(ata$fixesCompare))
plot(sd(ata$costDifference))
plot(sd(ata$fixesDifference))
plot(summary(ata$fixesDifference))
plot(summary(ata$fixesDifference))
plot(sd(ata$fixesDifference))
tgc <- summarySE(tg, measurevar="len", groupvars=c("supp","dose"))
library('ggplot2')
tgc <- summarySE(tg, measurevar="len", groupvars=c("supp","dose"))
tgc <- summarySE(tg, measurevar="len", groupvars=c("supp","dose"))
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
tgc <- summarySE(tg, measurevar="len", groupvars=c("supp","dose"))
tgc <- summarySE(ata, measurevar="ModulePath")
head(ata)
tgc <- summarySE(ata, measurevar="ModulePath")
tgc <- summarySE(ata, measurevar="ModulePath", na.rm = TRUE)
tgc <- summarySE(ata, measurevar="ModulePath", na.rm = TRUE)
tgc <- summarySE(ata, measurevar="ModulePath", c('costDifference', 'FixesDifference'))
tgc <- summarySE(ata, measurevar="ModulePath", c('costDifference', 'FixeDifference'))
tgc <- summarySE(ata, measurevar="ModulePath", c('costDifference', 'FixDifference'))
head(ata)
tgc <- summarySE(ata, measurevar="ModulePath", groupvars = c('costDifference', 'FixesDifference'))
tgc <- summarySE(ata, measurevar="ModulePath", groupvars = c('costDifference', 'fixesDifference'))
tgc
tgc <- summarySE(ata, measurevar="costDifference", groupvars = c('ModulePath', 'fixesDifference'))
tgc <- summarySE(ata, measurevar="fixesDifference", groupvars = c('ModulePath', 'fixesDifference'))
tgc <- summarySE(ata, measurevar="fixesDifference", groupvars = c('ModulePath', 'ModuleLevel'))
tgc
tgc <- summarySE(ata, measurevar="fixesDifference")
tgc
tgc <- summarySE(ata, measurevar="fixesDifference", groupvars = c('ModulePath'))
tgc
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, ModulePath2, costDifference, fixesDifference, fixesCompare, costCompare from projectcostdifference where ProjectId = 1 and ModuleLevel = 2 and costCompare <> 0 limit 100000")
ata = fetch(rs, n=-1)
tgc <- summarySE(ata, measurevar="fixesDifference", groupvars = c('ModulePath', 'ModulePath2'))
tgc
ggplot(tgc, aes(x=ModulePath2, y=fixesDifference, colour=ModulePath)) +
geom_errorbar(aes(ymin=fixesDifference-se, ymax=fixesDifference+se), width=.1) +
geom_line() +
geom_point()
ggplot(tgc, aes(x=ModulePath, y=fixesDifference, colour=ModulePath2)) +
geom_errorbar(aes(ymin=fixesDifference-se, ymax=fixesDifference+se), width=.1) +
geom_line() +
geom_point()
ggplot(tgc, aes(x=ModulePath, y=fixesDifference, group=ModulePath2)) +
geom_errorbar(aes(ymin=fixesDifference-ci, ymax=fixesDifference+ci), color="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size=3)
pd <- position_dodge(0.1) # move them .05 to the left and right
ggplot(tgc, aes(x=ModulePath, y=fixesDifference, group=ModulePath2)) +
geom_errorbar(aes(ymin=fixesDifference-ci, ymax=fixesDifference+ci), color="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size=3)
ggplot(tgc, aes(x=ModulePath, y=fixesDifference, group=ModulePath2, colour=ModulePath2)) +
geom_errorbar(aes(ymin=fixesDifference-ci, ymax=fixesDifference+ci), color="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size=3)
ggplot(tgc, aes(x=ModulePath, y=fixesDifference, group=ModulePath2, colour=ModulePath2)) +
geom_errorbar(aes(ymin=fixesDifference-ci, ymax=fixesDifference+ci), color="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size=3, shape=21, fill="white")
scale_colour_hue(name="Supplement type",    # Legend label, use darker colors
breaks=c("OJ", "VC"),
labels=c("Orange juice", "Ascorbic acid"),
l=40) +                    # Use darker colors, lightness=40
ggtitle("The Effect of Vitamin C on\nTooth Growth in Guinea Pigs") +
expand_limits(y=0) +                        # Expand y range
scale_y_continuous(breaks=0:20*4) +         # Set tick every 4
theme_bw() +
theme(legend.justification=c(1,0),
legend.position=c(1,0))               # Position legend in bottom right
ggplot(tgc, aes(x=ModulePath, y=fixesDifference, group=ModulePath2, colour=ModulePath2)) +
geom_errorbar(aes(ymin=fixesDifference-ci, ymax=fixesDifference+ci), color="black", width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd, size=3, shape=21, fill="white") +
scale_colour_hue(name="Supplement type",    # Legend label, use darker colors
breaks=c("OJ", "VC"),
labels=c("Orange juice", "Ascorbic acid"),
l=40) +                    # Use darker colors, lightness=40
ggtitle("The Effect of Vitamin C on\nTooth Growth in Guinea Pigs") +
expand_limits(y=0) +                        # Expand y range
scale_y_continuous(breaks=0:20*4) +         # Set tick every 4
theme_bw() +
theme(legend.justification=c(1,0),
legend.position=c(1,0))
tgc
head(ata)
library(RMySQL)
mydb = dbConnect(MySQL(), user='root', password='Sch..l1234', dbname='issuesminer', host='localhost')
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, ModulePath2, costDifference, fixesDifference, fixesCompare, costCompare from projectcostdifference where ProjectId = 1 and ModuleLevel = 2 and costCompare <> 0 limit 100000")
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, ModulePath2, costDifference, fixesDifference, fixesCompare, costCompare from projectcostdifference")
ata = fetch(rs, n=-1)
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, ModulePath2, costDifference, fixesDifference, fixesCompare, costCompare from projectcostdifference")
ata = fetch(rs, n=-1)
rs = dbSendQuery(mydb, "select fixesDifference from projectcostdifference order by fixesDifference")
ata = fetch(rs, n=-1)
head(ata)
nrow(ata)
(95/100)*25636756
rs = dbSendQuery(mydb, "select fixesDifference from projectcostdifference order by fixesDifference ASC limit 1 offset 24354918")
ata = fetch(rs, n=-1)
head(ata)
rs = dbSendQuery(mydb, "select COUNT(*) from projectcostdifference where fixesDifference<8")
ata = fetch(rs, n=-1)
head(ata)
all = 25636756;
lessthan8 = 24315500
lessthan8/all
rs = dbSendQuery(mydb, "select COUNT(*) from projectcostdifference where fixesDifference<=8")
ata = fetch(rs, n=-1)
head(ata)
inclu8 = 24435772
inclu8/all
rs = dbSendQuery(mydb, "select COUNT(*) from projectcostdifference where fixesDifference=0")
ata = fetch(rs, n=-1)
head(ata)
all-14163374
14163374/all
(90/100)*25636756
ninety = 23073080;
rs = dbSendQuery(mydb, "select COUNT(*) from projectcostdifference order by fixesDifference ASC limit 1 offset 23073080")
rs = dbSendQuery(mydb, "select fixesDifference from projectcostdifference order by fixesDifference ASC limit 1 offset 23073080")
ata = fetch(rs, n=-1)
rs = dbSendQuery(mydb, "select fixesDifference from projectcostdifference order by fixesDifference ASC limit 1 offset 23073080")
ata = fetch(rs, n=-1)
head(ata)
rs = dbSendQuery(mydb, "select count(*) from projectcostdifference where moduleDifference <= 4")
rs = dbSendQuery(mydb, "select count(*) from projectcostdifference where fixesDifference <= 4")
ata = fetch(rs, n=-1)
head(ata)
incl4 = 23652992
incl4/all
rs = dbSendQuery(mydb, "select count(*) from projectcostdifference where fixesDifference < 4")
ata = fetch(rs, n=-1)
ata = fetch(rs, n=-1)
head(ata)
rs = dbSendQuery(mydb, "select Id, ProjectId, ModuleLevel, ModulePath, ModulePath2, costDifference, fixesDifference, fixesCompare, costCompare from projectcostdifference where ProjectId = 1 and ModuleLevel = 2 and costCompare <> 0 limit 100000")
mydb = dbConnect(MySQL(), user='root', password='Sch..l1234', dbname='issuesminer', host='localhost')
rs = dbSendQuery(mydb, "select count(*) from projectcostdifference where fixesDifference < 4")
ata = fetch(rs, n=-1)
inclu8 = 24435772
incl4 = 23652992
head(ata)
lessthan4 = 23028100
lessthan4/all
incl4/all
percent_threshold = function(percent = 95, total = 25636756) {
return ((percent/100) * total)
}
percent_threshold(99)
percent_threshold = function(percent = 95, total = 25636756) {
return ((percent/100) * total);
}
percent_threshold(99)
is()
is(mydb)
sign.alt.cost <- data.frame(pid=numeric(), ModulePath=character(),ModuleLevel=numeric(),AlternativeCost=numeric())
colnames(sign.alt.cost)
names(sign.alt.cost)
min.sign.alt.cost <- 4000
names(min.sign.alt.cost)
colnames(min.sign.alt.cost)
my.data.t <- read.csv2(paste("Project", pid, "ChurnEstimationsg.csv", sep=""))
setwd("/Users/OMITOBISAM/Desktop/Thesis Data Import/New Projects/New Project 9 Cost Churn")
pids <- c(4)
pid <- 4
print(pid)
my.data.t <- read.csv2(paste("Project", pid, "ChurnEstimationsg.csv", sep=""))
my.data.t <- read.csv2(paste("Project", pid, "ChurnEstimations.csv", sep=""))
setwd("/Users/OMITOBISAM/Desktop/Thesis Data Import/New Projects/New Project 4 Cost Churn")
my.data.t <- read.csv2(paste("Project", pid, "ChurnEstimations.csv", sep=""))
my.data.t <- read.csv2(paste("Project", pid, "ChurnEstimationsg.csv", sep=""))
my.data.m <- my.data.t[my.data.t[,"ModuleDateRevisionId"]>0, ]
head(my.data.m)
head(unique(my.data.m$ModuleDateRevisionId))
head(unique(my.data.m$ProjectDateRevisionId))
unique(my.data.m$ProjectDateRevisionId)
unique(my.data.m$ModuleLevel)
unique(my.data.t$ModuleLevel)
unique(my.data.m$ModuleLevel)
my.data.e <- my.data.t[my.data.t[,"ModuleDateRevisionId"]<0, ]
unique(my.data.e$ModuleLevel)
unique(my.data.e$Estimation)
my.data.m <- my.data.m[as.numeric(my.data.m[["ModuleLevel"]]) < 5,]
head(my.data.m)
head(summary(my.data.m))
head(explain(my.data.m))
head(structure(my.data.m))
summary(head(my.data.m))
typeof(head(my.data.m))
summary(head(my.data.m))
structure(head(my.data.m))
my.data.m <- my.data.m[as.numeric(my.data.m[["ModuleLevel"]]) < 5,]
my.data.m[my.data.m[["Estimation"]] < 0, "Estimation"] <- 0.0
my.data.e[my.data.e[["Estimation"]] < 0, "Estimation"] <- 0.0
names(my.data.m)
my.data.m[["Imp"]] <- 0.0
names(my.data.m)
my.data.lvls <- unique(as.numeric(my.data.m[["ModuleLevel"]]))
print(my.data.lvls)
my.data.pid.est <- as.list(my.data.e[,"Estimation"])
head(my.data.pid.est)
names(my.data.pid.est) <- as.character(my.data.e[,"ProjectDateRevisionId"])
head(my.data.pid.est)
my.data.m[,"ProjectChurnEstimation"] <- unlist(my.data.pid.est[as.character(my.data.m[,"ProjectDateRevisionId"])])
head(my.data.m$ProjectChurnEstimation)
head(my.data.m$ProjectChurnEstimation,my.data.m$Estimation )
head(c(my.data.m$ProjectChurnEstimation,my.data.m$Estimation) )
head(my.data.m[,c("ProjectChurnEstimation","Estimation")])
my.data.m[,"AlternativeCost"] <- my.data.m[,"Estimation"] - my.data.m[,"ProjectChurnEstimation"]
head(my.data.m)
max(my.data.m$AlternativeCost)
min(my.data.m$AlternativeCost)
if("Date" %in% colnames(my.data.e)) {
try(my.data.pid.est <- as.list(as.character(my.data.e[,"Date"])))
try(names(my.data.pid.est) <- as.character(my.data.e[,"ProjectDateRevisionId"]))
try(my.data.m[,"Date"] <- unlist(my.data.pid.est[as.character(my.data.m[,"ProjectDateRevisionId"])]))
}
my.data.m[,"AlternativeCost"] <- my.data.m[,"Estimation"] - my.data.m[,"ProjectChurnEstimation"]
write.csv2(file=paste("Project",pid,"Data2.csv", sep=""),as.data.frame(my.data.m))
